#!/usr/bin/env python3.6
import os, queue, re, subprocess, sys, time, threading
from datetime import datetime

# how often to poll a drive when waiting for a CD, in seconds
drive_polling_interval = 5
# regex for lines to strip from cue sheet
cue_sheet_filter_regex = re.compile(rb'^ *(TITLE|PERFORMER|REM|PREGAP|CDTEXTFILE|FILE|INDEX 00(?! 00:00:00))')
flac_compression_level_switch = '--best'

def cue_sheet_line_filter(line):
	return not cue_sheet_filter_regex.search(line)

def open_paranoia_stream(device_filename, raw_output=False):
	paranoia_command = [ 'cdparanoia' ]
	if raw_output: paranoia_command.append('--output-raw-little-endian')
	paranoia_command += [ '-qd', os.path.join('/dev', device_filename), '--disable-paranoia', '[0]-', '-' ]
	return subprocess.Popen(paranoia_command, stdout=subprocess.PIPE).stdout

def parse_disc_names(filehandle):
	num_token_regex = re.compile(r'\[([0-9]+)\]')
	for raw_disc_name in filter(lambda s: len(s) != 0 and s[0] != '#', map(str.strip, filehandle)):
		num_token_match = num_token_regex.search(raw_disc_name)
		if num_token_match:
			num_token = num_token_match.group(0)
			disc_count = int(num_token_match.group(1))
			for i in range(disc_count):
				yield raw_disc_name.replace(num_token, str(i+1))
		else:
			yield raw_disc_name

def rip_and_verify_thread(device_filename, device_lun, disc_name_queue, open_drive_lock, print_lock):

	def log_thread_event(*print_args):
		with print_lock: print(device_filename + ':', *print_args)

	while True:
		disc_name = disc_name_queue.get()
		with open_drive_lock:
			open_drive_and_prompt_for_cd(device_filename, disc_name, print_lock)
		start_time = datetime.now()
		log_thread_event('Reading table of contents for', disc_name)
		cdda2wav_result = subprocess.run(['cdda2wav', '-cuefile', '-info-only', '-t', 'all',
				'dev=' + device_lun, disc_name + '.wav'], stderr=subprocess.DEVNULL)
		if cdda2wav_result.returncode != 0:
			log_thread_event('cdda2wav returned non-zero error code, skipping this disc...')
			disc_name_queue.task_done()
			continue
		open(disc_name + '.stripped.cue', 'wb').writelines(
			filter(cue_sheet_line_filter, open(disc_name + '.cue', 'rb')))
		log_thread_event('Reading audio data for', disc_name)
		flac_result = subprocess.run(['flac', '-ws', '--cuesheet', disc_name + '.stripped.cue',
				'--no-cued-seekpoint', flac_compression_level_switch, '-o', disc_name + '.flac', '-'],
				stdin=open_paranoia_stream(device_filename))
		if flac_result.returncode != 0:
			log_thread_event('flac returned non-zero error code, skipping this disc...')
			disc_name_queue.task_done()
			continue
		encoded_md5 = subprocess.run(['metaflac', '--show-md5sum', disc_name + '.flac'],
			stdout=subprocess.PIPE, encoding='ascii').stdout.strip()
		verified_md5 = subprocess.run('md5', stdin=open_paranoia_stream(device_filename, True),
			stdout=subprocess.PIPE, encoding='ascii').stdout.strip()
		log_thread_event('Ripped and verified', disc_name, 'in', datetime.now() - start_time)
		if (encoded_md5 != verified_md5):
			log_thread_event('MD5 mismatch, possible bad CD.')
			log_thread_event('MD5 from .flac file:', encoded_md5)
			log_thread_event('MD5 from verification rip:', verified_md5)
		disc_name_queue.task_done()

def find_cd_device_params(device_entry):
	cd_device_entry_regex = re.compile(r'at scbus(\d+) target (\d+) lun (\d+) \((cd\d+),(pass\d+)\)$')
	cd_device_entry_match = cd_device_entry_regex.search(device_entry)
	if cd_device_entry_match:
		device_lun = '{},{},{}'.format(*cd_device_entry_match.group(1,2,3))
		device_filename = cd_device_entry_match.group(4)
		high_level_device_perms_ok = device_readable(device_filename)
		pass_device_filename = cd_device_entry_match.group(5)
		low_level_device_perms_ok = device_readable_and_writable(pass_device_filename)
		if not high_level_device_perms_ok:
			print('Need read permission for', os.path.join('/dev', device_filename))
		if not low_level_device_perms_ok:
			print('Need read and write permissions for', os.path.join('/dev', pass_device_filename))
		if high_level_device_perms_ok and low_level_device_perms_ok:
			return (device_filename, device_lun)
		else:
			print(device_filename, 'is not usable due to inadequate permissions (see above)')

def open_drive_and_prompt_for_cd(device_filename, disc_name, print_lock):
	subprocess.run(['cdcontrol', '-f', device_filename, 'eject'])
	with print_lock: print(device_filename + ':', 'Insert', disc_name)
	cdid = ''
	while not cdid:
		time.sleep(drive_polling_interval)
		cdid = subprocess.run(['cdcontrol', '-f', device_filename, 'cdid'],
			stdout=subprocess.PIPE).stdout.strip()
	return cdid

def can_open_device_with_mode(device_filename, mode):
	try:
		open(os.path.join('/dev', device_filename), mode)
		return True
	except PermissionError:
		return False

def device_readable(device_filename):
	return can_open_device_with_mode(device_filename, 'r')

def device_readable_and_writable(device_filename):
	return can_open_device_with_mode(device_filename, 'r+b')

def bail_out(*error_message):
	print(*error_message, file=sys.stderr)
	sys.exit(1)

if __name__ == '__main__':
	if not device_readable_and_writable('xpt0'):
		bail_out('Need read and write permissions for /dev/xpt0!')
	camcontrol_process = subprocess.Popen(['camcontrol', 'devlist'],
		stdout=subprocess.PIPE, encoding='ascii')
	devices = list(filter(None, map(find_cd_device_params, camcontrol_process.stdout)))
	if not devices: bail_out('No usable optical drives found!')
	disc_name_queue = queue.Queue()
	open_drive_lock = threading.Lock()
	print_lock = threading.Lock()
	for device in devices:
		threading.Thread(target=rip_and_verify_thread,
			args=device + (disc_name_queue, open_drive_lock, print_lock), daemon=True).start()
	for disc_name in parse_disc_names(sys.stdin):
		disc_name_queue.put(disc_name)
	disc_name_queue.join()
	for device in devices: subprocess.run(['cdcontrol', '-f', device[0], 'eject'])
